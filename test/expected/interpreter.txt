┌ Case jpamb.cases.Simple.assertBoolean:(false) -> assertion error
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertBoolean:(Z)V' '(false)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(bool False)}, ϵ, jpamb.cases.Simple.assertBoolean:(Z)V:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Get(offset=0, static=True, field=AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())))
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertBoolean:(Z)V' '(false)'
│ Expected 'assertion error' and got 'failure'
└ Case jpamb.cases.Simple.assertBoolean:(false) -> assertion error
┌ Case jpamb.cases.Simple.assertBoolean:(true) -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertBoolean:(Z)V' '(true)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(bool True)}, ϵ, jpamb.cases.Simple.assertBoolean:(Z)V:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Get(offset=0, static=True, field=AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())))
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertBoolean:(Z)V' '(true)'
│ Expected 'ok' and got 'failure'
└ Case jpamb.cases.Simple.assertBoolean:(true) -> ok
┌ Case jpamb.cases.Simple.assertFalse:() -> assertion error
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertFalse:()V' '()'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{}, ϵ, jpamb.cases.Simple.assertFalse:()V:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Get(offset=0, static=True, field=AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())))
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertFalse:()V' '()'
│ Expected 'assertion error' and got 'failure'
└ Case jpamb.cases.Simple.assertFalse:() -> assertion error
┌ Case jpamb.cases.Simple.assertInteger:(0) -> assertion error
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertInteger:(I)V' '(0)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.assertInteger:(I)V:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Get(offset=0, static=True, field=AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())))
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertInteger:(I)V' '(0)'
│ Expected 'assertion error' and got 'failure'
└ Case jpamb.cases.Simple.assertInteger:(0) -> assertion error
┌ Case jpamb.cases.Simple.assertInteger:(1) -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertInteger:(I)V' '(1)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int 1)}, ϵ, jpamb.cases.Simple.assertInteger:(I)V:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Get(offset=0, static=True, field=AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())))
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertInteger:(I)V' '(1)'
│ Expected 'ok' and got 'failure'
└ Case jpamb.cases.Simple.assertInteger:(1) -> ok
┌ Case jpamb.cases.Simple.assertPositive:(-1) -> assertion error
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertPositive:(I)V' '(-1)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int -1)}, ϵ, jpamb.cases.Simple.assertPositive:(I)V:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Get(offset=0, static=True, field=AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())))
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertPositive:(I)V' '(-1)'
│ Expected 'assertion error' and got 'failure'
└ Case jpamb.cases.Simple.assertPositive:(-1) -> assertion error
┌ Case jpamb.cases.Simple.assertPositive:(1) -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertPositive:(I)V' '(1)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int 1)}, ϵ, jpamb.cases.Simple.assertPositive:(I)V:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Get(offset=0, static=True, field=AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())))
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.assertPositive:(I)V' '(1)'
│ Expected 'ok' and got 'failure'
└ Case jpamb.cases.Simple.assertPositive:(1) -> ok
┌ Case jpamb.cases.Simple.checkBeforeAssert:(-1) -> assertion error
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeAssert:(I)V' '(-1)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int -1)}, ϵ, jpamb.cases.Simple.checkBeforeAssert:(I)V:0>
│││ [DEBUG] STEP ifz ne 3
│││ {} <{0:(int -1)}, (int -1), jpamb.cases.Simple.checkBeforeAssert:(I)V:1>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Ifz(offset=1, condition='ne', target=3)
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeAssert:(I)V' '(-1)'
│ Expected 'assertion error' and got 'failure'
└ Case jpamb.cases.Simple.checkBeforeAssert:(-1) -> assertion error
┌ Case jpamb.cases.Simple.checkBeforeAssert:(0) -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeAssert:(I)V' '(0)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeAssert:(I)V:0>
│││ [DEBUG] STEP ifz ne 3
│││ {} <{0:(int 0)}, (int 0), jpamb.cases.Simple.checkBeforeAssert:(I)V:1>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Ifz(offset=1, condition='ne', target=3)
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeAssert:(I)V' '(0)'
│ Expected 'ok' and got 'failure'
└ Case jpamb.cases.Simple.checkBeforeAssert:(0) -> ok
┌ Case jpamb.cases.Simple.checkBeforeDivideByN2:(0) -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN2:(I)I' '(0)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:0>
│││ [DEBUG] STEP ifz eq 6
│││ {} <{0:(int 0)}, (int 0), jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:1>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Ifz(offset=1, condition='eq', target=6)
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN2:(I)I' '(0)'
│ Expected 'ok' and got 'failure'
└ Case jpamb.cases.Simple.checkBeforeDivideByN2:(0) -> ok
┌ Case jpamb.cases.Simple.checkBeforeDivideByN2:(1) -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN2:(I)I' '(1)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 1)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:0>
│││ [DEBUG] STEP ifz eq 6
│││ {} <{0:(int 1)}, (int 1), jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:1>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Ifz(offset=1, condition='eq', target=6)
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN2:(I)I' '(1)'
│ Expected 'ok' and got 'failure'
└ Case jpamb.cases.Simple.checkBeforeDivideByN2:(1) -> ok
┌ Case jpamb.cases.Simple.checkBeforeDivideByN:(0) -> assertion error
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN:(I)I' '(0)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN:(I)I:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Get(offset=0, static=True, field=AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())))
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN:(I)I' '(0)'
│ Expected 'assertion error' and got 'failure'
└ Case jpamb.cases.Simple.checkBeforeDivideByN:(0) -> assertion error
┌ Case jpamb.cases.Simple.checkBeforeDivideByN:(1) -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN:(I)I' '(1)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int 1)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN:(I)I:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Get(offset=0, static=True, field=AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())))
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN:(I)I' '(1)'
│ Expected 'ok' and got 'failure'
└ Case jpamb.cases.Simple.checkBeforeDivideByN:(1) -> ok
┌ Case jpamb.cases.Simple.divideByN:(0) -> divide by zero
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideByN:(I)I' '(0)'
││┌ Stderr
│││ [DEBUG] STEP push:I 1
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.divideByN:(I)I:0>
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0)}, (int 1), jpamb.cases.Simple.divideByN:(I)I:1>
│││ [DEBUG] STEP binary:I div
│││ {} <{0:(int 0)}, (int 1)(int 0), jpamb.cases.Simple.divideByN:(I)I:2>
││└ Stderr
││┌ Stdout
│││ divide by zero
││└ Stdout
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideByN:(I)I' '(0)'
│ Expected 'divide by zero' and got 'divide by zero'
└ Case jpamb.cases.Simple.divideByN:(0) -> divide by zero
┌ Case jpamb.cases.Simple.divideByN:(1) -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideByN:(I)I' '(1)'
││┌ Stderr
│││ [DEBUG] STEP push:I 1
│││ {} <{0:(int 1)}, ϵ, jpamb.cases.Simple.divideByN:(I)I:0>
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 1)}, (int 1), jpamb.cases.Simple.divideByN:(I)I:1>
│││ [DEBUG] STEP binary:I div
│││ {} <{0:(int 1)}, (int 1)(int 1), jpamb.cases.Simple.divideByN:(I)I:2>
│││ [DEBUG] STEP return:I
│││ {} <{0:(int 1)}, (int 1), jpamb.cases.Simple.divideByN:(I)I:3>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideByN:(I)I' '(1)'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.divideByN:(1) -> ok
┌ Case jpamb.cases.Simple.divideByNMinus10054203:(0) -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideByNMinus10054203:(I)I' '(0)'
││┌ Stderr
│││ [DEBUG] STEP push:I 1
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.divideByNMinus10054203:(I)I:0>
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0)}, (int 1), jpamb.cases.Simple.divideByNMinus10054203:(I)I:1>
│││ [DEBUG] STEP push:I 10054203
│││ {} <{0:(int 0)}, (int 1)(int 0), jpamb.cases.Simple.divideByNMinus10054203:(I)I:2>
│││ [DEBUG] STEP binary:I sub
│││ {} <{0:(int 0)}, (int 1)(int 0)(int 10054203), jpamb.cases.Simple.divideByNMinus10054203:(I)I:3>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Binary(offset=4, type=Int(), operant=<BinaryOpr.Sub: 2>)
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideByNMinus10054203:(I)I' '(0)'
│ Expected 'ok' and got 'failure'
└ Case jpamb.cases.Simple.divideByNMinus10054203:(0) -> ok
┌ Case jpamb.cases.Simple.divideByNMinus10054203:(10054203) -> divide by zero
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideByNMinus10054203:(I)I' '(10054203)'
││┌ Stderr
│││ [DEBUG] STEP push:I 1
│││ {} <{0:(int 10054203)}, ϵ, jpamb.cases.Simple.divideByNMinus10054203:(I)I:0>
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 10054203)}, (int 1), jpamb.cases.Simple.divideByNMinus10054203:(I)I:1>
│││ [DEBUG] STEP push:I 10054203
│││ {} <{0:(int 10054203)}, (int 1)(int 10054203), jpamb.cases.Simple.divideByNMinus10054203:(I)I:2>
│││ [DEBUG] STEP binary:I sub
│││ {} <{0:(int 10054203)}, (int 1)(int 10054203)(int 10054203), jpamb.cases.Simple.divideByNMinus10054203:(I)I:3>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Binary(offset=4, type=Int(), operant=<BinaryOpr.Sub: 2>)
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideByNMinus10054203:(I)I' '(10054203)'
│ Expected 'divide by zero' and got 'failure'
└ Case jpamb.cases.Simple.divideByNMinus10054203:(10054203) -> divide by zero
┌ Case jpamb.cases.Simple.divideByZero:() -> divide by zero
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideByZero:()I' '()'
││┌ Stderr
│││ [DEBUG] STEP push:I 1
│││ {} <{}, ϵ, jpamb.cases.Simple.divideByZero:()I:0>
│││ [DEBUG] STEP push:I 0
│││ {} <{}, (int 1), jpamb.cases.Simple.divideByZero:()I:1>
│││ [DEBUG] STEP binary:I div
│││ {} <{}, (int 1)(int 0), jpamb.cases.Simple.divideByZero:()I:2>
││└ Stderr
││┌ Stdout
│││ divide by zero
││└ Stdout
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideByZero:()I' '()'
│ Expected 'divide by zero' and got 'divide by zero'
└ Case jpamb.cases.Simple.divideByZero:() -> divide by zero
┌ Case jpamb.cases.Simple.divideZeroByZero:(0, 0) -> divide by zero
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideZeroByZero:(II)I' '(0, 0)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0), 1:(int 0)}, ϵ, jpamb.cases.Simple.divideZeroByZero:(II)I:0>
│││ [DEBUG] STEP load:I 1
│││ {} <{0:(int 0), 1:(int 0)}, (int 0), jpamb.cases.Simple.divideZeroByZero:(II)I:1>
│││ [DEBUG] STEP binary:I div
│││ {} <{0:(int 0), 1:(int 0)}, (int 0)(int 0), jpamb.cases.Simple.divideZeroByZero:(II)I:2>
││└ Stderr
││┌ Stdout
│││ divide by zero
││└ Stdout
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideZeroByZero:(II)I' '(0, 0)'
│ Expected 'divide by zero' and got 'divide by zero'
└ Case jpamb.cases.Simple.divideZeroByZero:(0, 0) -> divide by zero
┌ Case jpamb.cases.Simple.divideZeroByZero:(0, 1) -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideZeroByZero:(II)I' '(0, 1)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0), 1:(int 1)}, ϵ, jpamb.cases.Simple.divideZeroByZero:(II)I:0>
│││ [DEBUG] STEP load:I 1
│││ {} <{0:(int 0), 1:(int 1)}, (int 0), jpamb.cases.Simple.divideZeroByZero:(II)I:1>
│││ [DEBUG] STEP binary:I div
│││ {} <{0:(int 0), 1:(int 1)}, (int 0)(int 1), jpamb.cases.Simple.divideZeroByZero:(II)I:2>
│││ [DEBUG] STEP return:I
│││ {} <{0:(int 0), 1:(int 1)}, (int 0), jpamb.cases.Simple.divideZeroByZero:(II)I:3>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.divideZeroByZero:(II)I' '(0, 1)'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.divideZeroByZero:(0, 1) -> ok
┌ Case jpamb.cases.Simple.earlyReturn:() -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.earlyReturn:()I' '()'
││┌ Stderr
│││ [DEBUG] STEP push:I 0
│││ {} <{}, ϵ, jpamb.cases.Simple.earlyReturn:()I:0>
│││ [DEBUG] STEP return:I
│││ {} <{}, (int 0), jpamb.cases.Simple.earlyReturn:()I:1>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.earlyReturn:()I' '()'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.earlyReturn:() -> ok
┌ Case jpamb.cases.Simple.justReturn:() -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.justReturn:()I' '()'
││┌ Stderr
│││ [DEBUG] STEP push:I 0
│││ {} <{}, ϵ, jpamb.cases.Simple.justReturn:()I:0>
│││ [DEBUG] STEP return:I
│││ {} <{}, (int 0), jpamb.cases.Simple.justReturn:()I:1>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.justReturn:()I' '()'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.justReturn:() -> ok
┌ Case jpamb.cases.Simple.justReturnNothing:() -> ok
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.justReturnNothing:()V' '()'
││┌ Stderr
│││ [DEBUG] STEP return:V
│││ {} <{}, ϵ, jpamb.cases.Simple.justReturnNothing:()V:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Return(offset=0, type=None)
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.justReturnNothing:()V' '()'
│ Expected 'ok' and got 'failure'
└ Case jpamb.cases.Simple.justReturnNothing:() -> ok
┌ Case jpamb.cases.Simple.multiError:(false) -> assertion error
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.multiError:(Z)I' '(false)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(bool False)}, ϵ, jpamb.cases.Simple.multiError:(Z)I:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Get(offset=0, static=True, field=AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())))
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.multiError:(Z)I' '(false)'
│ Expected 'assertion error' and got 'failure'
└ Case jpamb.cases.Simple.multiError:(false) -> assertion error
┌ Case jpamb.cases.Simple.multiError:(true) -> divide by zero
│┌ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.multiError:(Z)I' '(true)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(bool True)}, ϵ, jpamb.cases.Simple.multiError:(Z)I:0>
│││ Traceback (most recent call last):
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 144, in <module>
│││     state = step(state)
│││   File "/Users/chrg/Develop/repos/jpamb/solutions/interpreter.py", line 134, in step
│││     raise NotImplementedError(f"Don't know how to handle: {a!r}")
│││ NotImplementedError: Don't know how to handle: Get(offset=0, static=True, field=AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())))
││└ Stderr
│└ Run .venv/bin/python3 solutions/interpreter.py 'jpamb.cases.Simple.multiError:(Z)I' '(true)'
│ Expected 'divide by zero' and got 'failure'
└ Case jpamb.cases.Simple.multiError:(true) -> divide by zero
Total 7/25
